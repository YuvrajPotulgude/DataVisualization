# -*- coding: utf-8 -*-
"""practice

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvh47WkZh7f1Kk9HJqvYZ2Ck4PsNkMzz

**Data Visualisation**
  * Matplotlib
  * Seaborn
  * Plotly
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/Walmart.csv')
df.head()

df.isnull().sum()

df.dtypes

"""**Data Types**
  * Numerical
    * Integer
    * Float
    * boolean
  * Non-Numerical
    * Object(String)
    * DateType
"""

print(df['Order Date'].min())
print(df['Order Date'].max())

"""* Convert the Date column into data type "datetime"
"""

df['Order Date'] = pd.to_datetime(df['Order Date'] , format = "%d-%m-%Y")
df['Ship Date'] = pd.to_datetime(df['Ship Date'] , format = "%d-%m-%Y")

df.dtypes

print(df['Order Date'].min())
print(df['Order Date'].max())

"""****
**Date Time Example in Python**
****
"""

date_custom = "09/12/2023 11:00 PM"
type(date_custom)

date_custom_dt = pd.to_datetime(date_custom, format = '%d/%m/%Y %H:%M %p')
print(date_custom_dt)
print(type(date_custom_dt))

date_custom_dt = pd.to_datetime(date_custom, format = '%d/%m/%Y %I:%M %p')
print(date_custom_dt)
print(type(date_custom_dt))

"""**Format Notations**
  * %d => day of month
  * %m => Month
  * %Y => Year with century
  * %y => Year without century
  * %I => Represents time in 24 Hour format
  * %H => Represents time in 12 Hour format
  * %M => Minute
  * %p => AM or PM
"""

import datetime                         #Python module to access current date and time
date_today = datetime.datetime.now()
print(date_today)

print(date_today.strftime('%d'))

print(date_today.strftime('%D'))

print(date_today.strftime('%m'))

print(date_today.strftime('%M'))

print(date_today.strftime('%y'))

print(date_today.strftime('%Y'))

print(date_today.strftime('%A'))

print(date_today.strftime('%a'))

date_custom = "09/12/23 11:00 PM"
type(date_custom)

date_custom_dt = pd.to_datetime(date_custom, format = '%d/%m/%y %H:%M %p')    #small letter "y" => as year is mentioned without century
print(date_custom_dt)
print(type(date_custom_dt))

from datetime import datetime,timedelta
yesterday_date = date_today - timedelta(days=1)
print("Yestarday Date=",yesterday_date)
print("Yestarday Weekday=",yesterday_date.strftime('%A'))

from datetime import datetime,timedelta
nextday_date = date_today + timedelta(days=1)
print(nextday_date)

"""****
***
"""

df.head()

df['Order Date'].dt.strftime('%d')

df['O_day'] = df['Order Date'].dt.day
#df['O_day'] = df['Order Date'].dt.strftime('%d')

df['O_Month'] = df['Order Date'].dt.month
#df['O_Month'] = df['Order Date'].dt.strftime('%m')

df['O_Year'] = df['Order Date'].dt.year
#df['O_Year'] = df['Order Date'].dt.strftime('%Y')

#df['Order Date'].dt.weekday
df["O_Weekday"] = df['Order Date'].dt.strftime('%A')

df.head()

def quarter(month):
  if month in [1,2,3]:
    return "Q1"
  elif month in [4,5,6]:
    return "Q2"
  elif month in [7,8,9]:
    return "Q3"
  else:
    return "Q4"

df['O_quarter'] = df['O_Month'].apply(quarter)

df.head()

"""* Processing Time for each order
  * Ship date - Order Date
"""

from datetime import datetime,timedelta

starttime = datetime(2023,1,1,12,0)
endtime = datetime(2023,1,10,14,30)

print(starttime , "*****" , endtime)

print()

duration = endtime - starttime
print(duration)

print()

print("Days" , duration.days)
print("Seconds" , duration.seconds)
print("Hours" , duration.seconds/3600)

df['Ship Date'] - df['Order Date']

df["Pocessing Time"] = (df['Ship Date'] - df['Order Date']).apply(lambda x : x.days)

df.head()

"""* Reordering of data columns"""

df.columns

new_order = ['Order ID', 'Order Date', 'Ship Date','Pocessing Time','O_day', 'O_Month', 'O_Year',
             'O_Weekday', 'O_quarter','Customer Name', 'Country','City', 'State', 'Category',
             'Product Name', 'Sales', 'Quantity','Profit']

df = df.reindex(columns = new_order)
df.head()

"""* unique categorical values"""

df['Category'].unique()

category_orders = df['Category'].value_counts().reset_index()
category_orders.columns = ['Category' , 'Order_count']
category_orders

"""* Quantity Ordered for each category"""

category_order_quantity = df.groupby('Category')['Quantity'].sum().sort_values(ascending=False).reset_index()
category_order_quantity

"""* Merging to dataframes using a commom key between them"""

category_df = pd.merge(category_orders , category_order_quantity , on = "Category")
category_df

"""* Object Oriented Plotting - creating a barplot using dataframe"""

category_df.plot.bar(x = 'Category' , figsize = (12,6))
plt.title("Category Order Counts & Quantity")

plt.xlabel("Category")
plt.ylabel("Counts")

plt.show()

"""* creating a Lineplot using dataframe"""

category_df.plot.line(x = 'Category' , figsize = (12,6) , marker = 'o')
plt.title("Category Order Counts & Quantity")

plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(rotation = 90)

plt.show()

"""* creating a scatter plot using dataframe"""

category_df.plot.scatter(x = 'Category' , y = 'Order_count' , figsize = (12,6))
plt.title("Category Order Counts & Quantity")

plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(rotation = 90)

plt.show()

category_df.columns

"""* pyplot plotting - plotting through matplotlib.pyplot

* bar plot
  * .bar(data , height , x)
"""

plt.figure(figsize = (12,6))
plt.bar(data = category_df , height = 'Order_count' , x = 'Category')


plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(rotation = 90)

plt.show()

"""* Multivariate bar plot
  * .bar(data , height , width)
"""

plt.figure(figsize = (12,6))

plt.bar(data = category_df , height = 'Quantity' , x = 'Category')
plt.bar(data = category_df , height = 'Order_count' , x = 'Category' , width = 0.5)

plt.title("Category Order Counts & Quantity")
plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(rotation = 90)

plt.show()

#category_df['Category']
np.arange(len(category_df))

"""* Multivarite bar plot - 2
  * .bar(bar_position , height , data , width)
"""

plt.figure(figsize = (12,6))

bar_position1 = np.arange(len(category_df))
bar_position2 = np.arange(len(category_df)) + 0.3

plt.bar(bar_position1 , height = 'Quantity' , data = category_df , width = 0.3)
plt.bar(bar_position2 , height = 'Order_count' , data = category_df , width = 0.3)

plt.title("Category Order Counts & Quantity")
plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(bar_position1 + 0.3/2 , category_df['Category'] , rotation = 90)

plt.show()

"""* Line plot
  * .plot(x , y , data)
"""

plt.figure(figsize = (12,6))


plt.plot( 'Category' , 'Quantity'  , data = category_df  , marker = '*' , label = 'Quantity')
plt.plot( 'Category' , 'Order_count' , data = category_df  , marker = '*' , label = 'Order Count')

plt.title("Category Order Counts & Quantity")
plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(rotation = 90)

plt.legend()
plt.show()

plt.figure(figsize = (12,6))


plt.scatter( 'Category' , 'Quantity'  , data = category_df  , marker = '*' , label = 'Quantity')
plt.scatter( 'Category' , 'Order_count' , data = category_df  , marker = '*' , label = 'Order Count')

plt.title("Category Order Counts & Quantity")
plt.xlabel("Category")
plt.ylabel("Counts")
plt.xticks(rotation = 90)

plt.legend()
plt.show()

df.head()

"""* create a plot to analyse relation between sales and Profit"""

plt.figure(figsize = (12,6))

plt.scatter('Sales' ,'Profit', data = df , color = 'yellow')
plt.axhline(y = 0 , c='black')

plt.xlabel("Sales")
plt.ylabel("Profit")
plt.title("Sales vs Profit")

plt.show()

y_data = df['Profit']

plt.figure(figsize = (12,6))

colors = ['red' if y < 0 else 'green' for y in y_data]

plt.scatter('Sales' ,'Profit', data = df , color = colors)
plt.axhline(y = 0 , c='black')

plt.xlabel("Sales")
plt.ylabel("Profit")
plt.title("Sales vs Profit")

plt.show()

"""****
**Pivot Table**
****

* Category wise
  * Total Orders
  * Average Profit
  * Total Quantity
  * Average Sales
"""

df.columns

#df.groupby('Category')[['Sales','Quantity', 'Profit']].agg(['mean','sum'])

table_category = pd.pivot_table(data = df,
                                index = 'Category',
                                values = ['Order ID','Quantity', 'Profit','Sales'],
                                aggfunc = {'Order ID' : pd.Series.nunique,
                                           'Quantity' : np.sum,
                                           'Profit' : np.mean,
                                           'Sales' : np.mean})

table_category.columns = ["Total Orders" , "Average Profit" , 'Total Quantity' , 'Average Sales']
table_category = table_category.sort_values('Total Quantity' , ascending = False).reset_index()
table_category

"""* Create a bar plot for each category sales & profit"""

table_category[['Category' , 'Average Profit' , 'Average Sales']].plot.barh(x='Category' , figsize = (12,6))

"""* Create a bar plot for each category => Quantity & profit using pyplot plotting


"""

plt.figure(figsize = (12,6))

bp1 = np.arange(len(table_category))
bp2 = np.arange(len(table_category)) + 0.4

plt.bar(bp1 , height = 'Total Quantity' ,data = table_category , label='Quantity' , width = 0.4)
plt.bar(bp2 , height = 'Average Profit' ,data = table_category , label='Profit' , width = 0.4)

plt.xlabel("Category")
plt.ylabel("Count")
plt.xticks(bar_position1 + 0.3/2 , table_category['Category'] , rotation = 90)
plt.legend()
plt.show()

plt.figure(figsize = (12,6))

plt.plot('Category' , 'Total Quantity' ,data = table_category , label='Quantity' , marker = '*')
plt.plot('Category' , 'Average Profit' ,data = table_category , label='Profit' , marker = '*')

plt.axhline(y = table_category['Total Quantity'].mean() , c = 'black' , label = 'Average Quantity')
plt.axhline(y = 0 , c = 'black' , linestyle = '--')

plt.xlabel("Category")
plt.ylabel("Count")
plt.xticks(rotation = 90)
plt.legend()
plt.show()

"""* Plotting for Average Sales vs Average Profit for each category"""

table_category[['Category'  , 'Average Sales' , 'Average Profit']].plot.barh(x = 'Category' , figsize = (12,6))

plt.figure(figsize = (12,6))

plt.plot('Category' , 'Average Sales' ,data = table_category , label='Sales' , marker = '*')
plt.plot('Category' , 'Average Profit' ,data = table_category , label='Profit' , marker = '*')

plt.axhline(y =table_category['Average Sales'].mean() , c = 'black' , label = 'Average sales')
plt.axhline(y = 0 , c = 'black' , linestyle = '--')

plt.xlabel("Category")
plt.ylabel("Count")
plt.xticks(rotation = 90)
plt.legend()
plt.show()

"""* Plotting for Total Orders vs Average Profit for each category"""

table_category[['Category'  , 'Total Orders' , 'Average Profit']].plot.barh(x = 'Category' , figsize = (12,6))

plt.figure(figsize = (12,6))

plt.plot('Category' , 'Total Orders' ,data = table_category , label='Orders' , marker = '*')
plt.plot('Category' , 'Average Profit' ,data = table_category , label='Profit' , marker = '*')


plt.xlabel("Category")
plt.ylabel("Count")
plt.xticks(rotation = 90)
plt.legend()
plt.show()

table_category.plot.barh(x = 'Category' , figsize = (12,6))

"""****
**Subplots**
****
"""

table_category.columns

plt.figure(figsize = (16,6))

plt.subplot(1,4,1)                            #subplot(row , column , plot_index)
plt.bar(x = 'Category' , height = 'Total Orders' , data = table_category)
plt.xticks(rotation = 90)
plt.xlabel("Category")
plt.ylabel('Order placed')

plt.subplot(1,4,2)
plt.bar(x = 'Category' , height = 'Average Sales' , data = table_category)
plt.xticks(rotation = 90)
plt.xlabel("Category")
plt.ylabel('Average Sales')

plt.subplot(1,4,3)
plt.bar(x = 'Category' , height = 'Total Quantity' , data = table_category)
plt.xticks(rotation = 90)
plt.xlabel("Category")
plt.ylabel('Total Quantity')

plt.subplot(1,4,4)
y_data = table_category['Average Profit']
plt.bar(x = 'Category' , height = 'Average Profit' , data = table_category ,
        color = ['red' if y < 0 else 'green' for y in y_data])
plt.xticks(rotation = 90)
plt.xlabel("Category")
plt.ylabel('Average Profit')

plt.tight_layout()
plt.show()

"""* Subplot Using Loop"""

table_category.columns

table_category.head(3)

plt.figure(figsize = (12,8))

x = table_category.columns[0]
y = table_category.columns[1:]

for i,val in enumerate(y):
  print(i+1 , val)
  plt.subplot(2,2,i+1)
  plt.bar(x = 'Category' , height = val , data = table_category , color = 'violet')
  plt.title(f"{val} for each category")
  plt.xlabel("Category")
  plt.ylabel(val)
  plt.xticks(rotation = 90)

plt.tight_layout()
plt.show()

t = table_category.set_index('Category')
print(list(t.columns))
print(list(t.index))
t.head()

"""* Use subplot to compare following variables in the table_category
  * Total orders vs Average Profit for each category
  * Total orders vs Average Sales for each category
  * Total orders vs Total Quantity for each category
  * Average profit vs Total Quantity for each category
  * Average profit vs Average Sales for each category
  * Total Quantity vs Average Sales for each category
"""

table_category

categories = table_category['Category']
p1 = table_category['Total Orders']
p2 = table_category['Average Profit']
p3 = table_category['Total Quantity']
p4 = table_category['Average Sales']

plt.figure(figsize = (15,14))

plt.subplot(3,2,1)
plt.title("Orders vs Average Profit of each category")
bar_width = 0.4
bp1 = np.arange(len(categories))
bp2 = bp1 + 0.4
plt.bar(bp1 , height = p1 , width = 0.4 , label = 'Total Orders')
plt.bar(bp2 , height = p2 , width = 0.4 , label = 'Average Profit')
plt.xticks((bp1 + bp2)/2 , categories , rotation = 90)
plt.legend()

plt.subplot(3,2,2)
plt.title("Orders vs Average Sales of each category")
bar_width = 0.4
bp1 = np.arange(len(categories))
bp2 = bp1 + 0.4
plt.bar(bp1 , height = p1 , width = 0.4 , label = 'Total Orders')
plt.bar(bp2 , height = p4 , width = 0.4 , label = 'Average Sales')
plt.xticks((bp1 + bp2)/2 , categories , rotation = 90)
plt.legend()

plt.subplot(3,2,3)
plt.title("Orders vs Total Quantity of each category")
bar_width = 0.4
bp1 = np.arange(len(categories))
bp2 = bp1 + 0.4
plt.bar(bp1 , height = p1 , width = 0.4 , label = 'Total Orders')
plt.bar(bp2 , height = p3 , width = 0.4 , label = 'Total Quantity')
plt.xticks((bp1 + bp2)/2 , categories , rotation = 90)
plt.legend()

plt.subplot(3,2,4)
plt.title("Average profit vs Total Quantity of each category")
bar_width = 0.4
bp1 = np.arange(len(categories))
bp2 = bp1 + 0.4
plt.bar(bp1 , height = p2 , width = 0.4 , label = 'Average Profit')
plt.bar(bp2 , height = p3 , width = 0.4 , label = 'Total Quantity')
plt.xticks((bp1 + bp2)/2 , categories , rotation = 90)
plt.legend()

plt.subplot(3,2,5)
plt.title("Average profit vs Average Sales of each category")
bar_width = 0.4
bp1 = np.arange(len(categories))
bp2 = bp1 + 0.4
plt.bar(bp1 , height = p2 , width = 0.4 , label = 'Average Profit')
plt.bar(bp2 , height = p4 , width = 0.4 , label = 'Average Sales')
plt.xticks((bp1 + bp2)/2 , categories , rotation = 90)
plt.legend()

plt.subplot(3,2,6)
plt.title("Total Quantity vs Average Sales of each category")
bar_width = 0.4
bp1 = np.arange(len(categories))
bp2 = bp1 + 0.4
plt.bar(bp1 , height = p3 , width = 0.4 , label = 'Total Quantity')
plt.bar(bp2 , height = p4 , width = 0.4 , label = 'Average Sales')
plt.xticks((bp1 + bp2)/2 , categories , rotation = 90)
plt.legend()

plt.tight_layout()
plt.show()

categories = table_category['Category']
p1 = table_category['Total Orders']
p2 = table_category['Average Profit']
p3 = table_category['Total Quantity']
p4 = table_category['Average Sales']

plt.figure(figsize = (15,14))

plt.subplot(3,2,1)
plt.title("Orders vs Average Profit of each category")
plt.plot(categories , p1 ,  label = 'Total Orders' , marker = '*')
plt.plot(categories , p2 ,  label = 'Average Profit', marker = '*')
plt.xticks(rotation = 90)
plt.legend()

plt.subplot(3,2,2)
plt.title("Orders vs Average Sales of each category")
plt.plot(categories , p1 , label = 'Total Orders', marker = '*')
plt.plot(categories , p4 , label = 'Average Sales', marker = '*')
plt.xticks(rotation = 90)
plt.legend()

plt.subplot(3,2,3)
plt.title("Orders vs Total Quantity of each category")
plt.plot(categories ,  p1 , label = 'Total Orders' , marker = '*')
plt.plot(categories ,  p3 , label = 'Total Quantity' , marker = '*')
plt.xticks(rotation = 90)
plt.legend()

plt.subplot(3,2,4)
plt.title("Average profit vs Total Quantity of each category")
plt.plot(categories ,  p2 , label = 'Average Profit' , marker = '*')
plt.plot(categories ,  p3 , label = 'Total Quantity' , marker = '*')
plt.xticks(rotation = 90)
plt.legend()

plt.subplot(3,2,5)
plt.title("Average profit vs Average Sales of each category")
plt.plot(categories ,  p2 , label = 'Average Profit' , marker = '*')
plt.plot(categories ,  p4 , label = 'Average Sales' , marker = '*')
plt.xticks(rotation = 90)
plt.legend()

plt.subplot(3,2,6)
plt.title("Total Quantity vs Average Sales of each category")
plt.plot(categories , p3 ,  label = 'Total Quantity' , marker = '*')
plt.plot(categories,  p4 ,  label = 'Average Sales' , marker = '*')
plt.xticks(rotation = 90)
plt.legend()

plt.tight_layout()
plt.show()

"""****
**EDA for each State**
****
"""

df.head()

"""* Analyse processing time for each state graphically"""

state_processing_time = df.groupby('State')['Pocessing Time'].agg(['min','max','mean'])
state_processing_time

state_processing_time.plot.bar()

"""* Analyse effect of processing time on sales value graphically"""

df['Pocessing Time'].unique()

processingTime_Sales = df.groupby('Pocessing Time')['Sales'].agg(['min' , 'max' , 'mean'])
processingTime_Sales

processingTime_Sales.plot.bar()

#find out number orders delivered in each processing time
df['Pocessing Time'].value_counts()

df['Pocessing Time'].value_counts().plot.bar()

#find out number of orders delivered in each state
df['State'].value_counts()

df['State'].value_counts().plot.bar()

#find out number of orders delivered in each processing time for each state
#processing Time => Categorical
#state => categorical

state_processing_time = pd.crosstab(df['State'] , df['Pocessing Time'])
state_processing_time

#Percentage of total order for each state delivered in each processing time.
state_processing_time['Total_Orders'] = state_processing_time.sum(axis = 1)

state_processing_time

state_processing_time.plot.bar()

"""****
heatmap
****
"""

state_processing_time

import seaborn as sns

plt.figure(figsize = (16,6))
sns.heatmap(state_processing_time.loc[:,0:7] , annot = True , fmt = '.2f' , cmap = "crest")
plt.show()

state_processing_time.loc['Arizona',0:7].plot.bar()

state_processing_time.loc[:,0].plot.bar()

"""* iterate throgh rows to plot for each state seperately"""

plt.figure(figsize = (16,15))

idx = 1
for state,datarow in state_processing_time.loc[:,0:7].iterrows():       #Not considering the total order column
  #print(state , datarow)
  plt.subplot(4,3,idx)
  datarow.plot.bar()
  plt.title(f"Processing time for state {state}")
  idx += 1

plt.tight_layout()
plt.show()

"""****
Percentage of total orders in each state for each processing time or Normalising the Data
****
"""

state_processing_time_percent = state_processing_time.copy()

for i in df['Pocessing Time'].unique():
  state_processing_time_percent[i] = state_processing_time_percent[i] / state_processing_time_percent['Total_Orders']

state_processing_time_percent

plt.figure(figsize = (16,6))
sns.heatmap(state_processing_time_percent.loc[:,0:7] , annot = True , fmt = '.2f' , cmap = "crest")
plt.show()

plt.figure(figsize = (16,15))

idx = 1
for state,datarow in state_processing_time_percent.loc[:,0:7].iterrows():       #Not considering the total order column
  #print(state , datarow)
  plt.subplot(4,3,idx)
  datarow.plot.bar()
  plt.title(f"Processing time for state {state}")
  idx += 1

plt.tight_layout()
plt.show()

"""* create pivot table for showing these value for each state
  * Number of orders
  * Total Quantity Sold
  * Average Sales
  * Total Sales
  * Average Profit
  * Total Profit

"""

state_table = pd.pivot_table(data = df,
                             index = 'State',
                             values = ['Order ID','Quantity','Sales','Profit'],
                             aggfunc = {'Order ID' : pd.Series.nunique,
                                        'Quantity' : np.sum,
                                        'Sales' : [np.mean , np.sum],
                                        'Profit' : [np.mean , np.sum]})
state_table.columns = ['Total Orders' , 'Average Profit' , 'Total Profit' ,
                       'Total Quantity' , 'Average Sales' , 'Total Sales']

state_table = state_table.reindex(columns = ['Total Orders' , 'Total Quantity' , 'Average Profit' ,
                                             'Total Profit' , 'Average Sales' , 'Total Sales'])
state_table

"""* Barplot of each column in different subplots using State name on X-axis
* Lineplot of each column in different subplots using State name on X-axis

* Bar plot using state name on x-axis to compare -
  * num of orders vs Quantity
  * num of orders vs Average Profit
  * num of orders vs Total Profit
  * num of orders vs Average Sales
  * num of orders vs Total Sales
  * Total Quantity vs Average Profit
  * Total Quantity vs Total Profit
  * Total Quantity vs Average Sales
  * Total Quantity vs Total Sales
  * Average Sales vs Average Profit
  * Total Sales vs Total Profit

* Line plot using state name on x-axis to compare -
  * num of orders vs Quantity
  * num of orders vs Average Profit
  * num of orders vs Total Profit
  * num of orders vs Average Sales
  * num of orders vs Total Sales
  * Total Quantity vs Average Profit
  * Total Quantity vs Total Profit
  * Total Quantity vs Average Sales
  * Total Quantity vs Total Sales
  * Average Sales vs Average Profit
  * Total Sales vs Total Profit

* Scatter plot using state name on x-axis to compare -
  * num of orders vs Quantity
  * num of orders vs Average Profit
  * num of orders vs Total Profit
  * num of orders vs Average Sales
  * num of orders vs Total Sales
  * Total Quantity vs Average Profit
  * Total Quantity vs Total Profit
  * Total Quantity vs Average Sales
  * Total Quantity vs Total Sales
  * Average Sales vs Average Profit
  * Total Sales vs Total Profit
"""

